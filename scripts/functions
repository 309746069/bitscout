#Bitscout project
#Copyright Kaspersky Lab

PROJECTNAME="bitscout"
PROJECTCAPNAME="Bitscout"
PROJECTSHORTNAME="scout"
BASEARCHITECTURE="i386"
BASERELEASE="xenial"
CONTAINERNAME="forensic"
CONTAINERUSERNAME="user"
CRYPTOKEYSIZE=2048

INITRDPATH=image/casper/initrd.gz
RESERVEDIR=reserve
SCREENNAME=${PROJECTNAME}_chroot #creates a screen session for interactive configuration. see scripts/chroot_enter.sh and scripts/chroot_leave.sh

[ -f "config/$PROJECTNAME-build.conf" ] && . "config/$PROJECTNAME-build.conf"

statusprint()
{
  if [ "$QUIET" == "true" ]
  then
    return 0
  else
    echo -e$PRINTOPTIONS "$1"
  fi
}

runinchroot()
{
  #init
  OPID="$RANDOM"

  if [ ! -d "./chroot" ]
  then
   statusprint "ERROR: Couldn't find chroot directory. Aborting.."
   exit 1
  fi

  #create lock file
  mkfifo chroot/tmp/lock.$OPID

  #prepare command file
  echo "#!/bin/bash
  echo -e '[>>>>>>>]: Running the followng script in screen session:\n[START]'
  cat /tmp/cmd.$OPID | tail -n +5 | sed 's/^/       /g'
  echo -e '[END]\n[<<<<<<<]'
$1
echo OK > /tmp/lock.$OPID" > chroot/tmp/cmd.$OPID
  chmod +x chroot/tmp/cmd.$OPID

  #start screen switcher
  ( cat chroot/tmp/lock.$OPID && sudo screen -S $SCREENNAME -X detach ) &

  #run command file
  sudo screen -S $SCREENNAME -X stuff "/tmp/cmd.$OPID\n"
  #attach to screen
  sudo screen -r $SCREENNAME

  #wait for semaphore unlock
  statusprint "Waiting for screen session to complete.."
  #cat chroot/tmp/lock.$OPID
  rm chroot/tmp/lock.$OPID
  rm chroot/tmp/cmd.$OPID
}


typeinchroot()
{
  sudo screen -S $SCREENNAME -X stuff "$1"
}


unpackinitrd()
{
  statusprint "Unpacking initrd image from $INITRDPATH.."
  rm -rf ./initrd
  mkdir ./initrd
  cd ./initrd
  if [ -f "../$INITRDPATH" ]
  then
    gzip -dc "../$INITRDPATH" | cpio -id
  else
    echo "[ERROR]: initrd image not found in $INITRDPATH."
  fi
  cd ..
}

packinitrd()
{
  statusprint "Packing initrd image into $INITRDPATH.."
  if [ -d "./initrd" ]
  then
    cd ./initrd
    find . | cpio -o -H newc | gzip -7 -c | sudo tee "../$INITRDPATH" >/dev/null
    cd ..
  else
    echo "[ERROR]: initrd directory not found. Aborting."
  fi
}


install_required_package()
{
  PKGNAME="$1"
  if ! dpkg-query --show --showformat='${db:Status-Status}\n' $PKGNAME | grep -q "^installed$"
  then
    statusprint "$PKGNAME was not found your system. It is required to continue.\nPlease authorize installing $PKGNAME.."
    if ! apt-cache search "$PKGNAME" | grep -q "$PKGNAME"
    then
      #let's check that universe repository is enabled. required for some packages, i.e. easy-rsa 
      REPOSITORY="universe"
      if ! apt-cache policy | grep -q "$REPOSITORY"
      then
        statusprint "Enabling additional repository ($REPOSITORY) for your system.."
        OSCODENAME=`lsb_release -c| awk '{print $2}'`
        sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu/ $OSCODENAME $REPOSITORY"
        sudo apt -y update
      fi
    fi;
    if ! sudo apt -y install "$PKGNAME"; 
    then 
      sudo apt -y update
      if ! sudo apt -y install "$PKGNAME"; 
      then 
        statusprint "ERROR: Couldn't install/find $PKGNAME. Aborting.."
        exit 1;
      fi;
    fi;
  fi
}

filelist_exists()
{
  statusprint "Checking if file (filelist) exists.."
  for i in $@
  do
    if [ ! -f "$i" ]; then
      statusprint "File is NOT FOUND: $i"
      return 1;
    else
      statusprint "File exists: $i"
    fi;
  done;
  return 0;
}

sudo_file_template_copy()
{
  SRC="$1"
  DST="$2"
  statusprint "Copying template-based file: \"$1\" -> \"$2\""
  sed "s/<PROJECTNAME>/${PROJECTNAME}/g;  s/<PROJECTCAPNAME>/${PROJECTCAPNAME}/g; s/<PROJECTSHORTNAME>/${PROJECTSHORTNAME}/g; s/<CONTAINERNAME>/${CONTAINERNAME}/g; s/<CONTAINERUSERNAME>/${CONTAINERUSERNAME}/g;" "$SRC" | sudo tee "$DST" >/dev/null
}
