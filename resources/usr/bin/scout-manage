#!/bin/bash
OPENVPNCONFIG=/etc/openvpn/<PROJECTSHORTNAME>.conf
TERMINAL=linux
CONTAINERNAME=<CONTAINERNAME>
CONTAINERUSER=<CONTAINERUSERNAME>
BOXHEIGHT=25
BOXWIDTH=80
BOXHEIGHT2=20
HISTORIANDIR=/opt/container/history

if [ `id -u` -ne 0 ]; then sudo "$0"; fi;  #this script should be run as root.

DIALOG_OK=0
DIALOG_CANCEL=1
DIALOG_HELP=2
DIALOG_EXTRA=3
DIALOG_ITEM_HELP=4
DIALOG_ESC=255

MAINMENUTEXT="Welcome to <PROJECTCAPNAME> 2.0!
You can use this simple tool for most common operations on the system.
Please choose one of the menu items below:" 
declare -a MAINMENU;
MAINMENU+=("INTRODUCTION:What is <PROJECTCAPNAME> and how to use it.")
MAINMENU+=("NETWORK:Connect to WiFi, setup static IP or proxy.")
MAINMENU+=("DISK:Manage attached disks (i.e. let expert work on it).")
MAINMENU+=("STATUS:System status, and expert sessions monitoring.")
MAINMENU+=("CHAT:Enter IRC chat with the expert.")
MAINMENU+=("CONTAINER-SHELL:Start a root shell inside guest container.")
MAINMENU+=("SHELL:Start a root local shell.")
if ! ps -p $(ps -p "$$" -o "ppid=") -o cmd= | grep -q '\.service'
then
 MAINMENU+=("EXIT:Return to previous environment.")
fi
MAINMENU+=("SHUTDOWN:Shutdown current system.")

NETWORKMENUTEXT="The following menu should help you change network configuration 
and connect to the Internet:"
declare -a NETWORKMENU;
NETWORKMENU+=("WIFI SETTINGS:Setup WiFi network connection.")
NETWORKMENU+=("STATIC IP:Setup static IP for LAN interface.")
NETWORKMENU+=("HTTP PROXY:Configure internet access via HTTP proxy.")
NETWORKMENU+=("SOCKS PROXY:Configure internet access via SOCKS proxy.")
NETWORKMENU+=("BACK:Return to previous menu.")


DISKMENUTEXT="View and manage attached disks:"
declare -a DISKMENU
DISKMENU+=("VIEW:View all available block devices.")
DISKMENU+=("MAP:Map device to expert's container.")
DISKMENU+=("UNMAP:Unmap device from expert's container.")
DISKMENU+=("BACK:Return to previous menu.")

function dialog_menu()
{
  DIALOGTITLE="$1"
  DIALOGTEXT="$2"
  DIALOGITEMS=""
  eval "declare -A ITEMS="${3#*=}
  for i in ${!ITEMS[@]}
  do
    DIALOGITEMS="$DIALOGITEMS \"${ITEMS[$i]%:*}\" \"${ITEMS[$i]#*:}\""
  done
  eval "dialog --nocancel --title \"$DIALOGTITLE\" --menu \"$DIALOGTEXT\" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 $DIALOGITEMS 3>&2 2>&1 1>&3"
}

function feature_not_implemented()
{
  dialog --title "NOT IMPLEMENTED" --msgbox "Sorry, this feature is not implemented yet." $BOXHEIGHT $BOXWIDTH
}

while true
do
  read MAINCHOICE <<< $(dialog_menu "MAIN MENU" "$MAINMENUTEXT" "$(declare -p MAINMENU)")

  case "$MAINCHOICE" in
    "NETWORK")
	while true
	do
	  read NETWORKCHOICE <<< $(dialog_menu "NETWORK" "$NETWORKMENUTEXT" "$(declare -p NETWORKMENU)")
      
	  case "$NETWORKCHOICE" in
	      "WIFI SETTINGS")
		pgrep wicd >/dev/null || systemctl restart wicd.service
		wicd-curses
		continue
		;;
	      "BACK")
                break;
                ;;
	      "STATIC IP")
		declare -a IFACEMENU;
		mapfile -t IFACEMENU < <( ip -o -4 addr show | awk '{ip=$4; bcast=$6; if(bcast!~/([0-9]{1,3}\.){3}[0-9]{1,3}/){print $2" "ip":"}else{print $2" "ip" broadcast "bcast":"}}'| grep -v "lxcbr0")
		IFACECHOICE=($( dialog_menu "NETWORK INTERFACE" "Select network interface to configure:" "$(declare -p IFACEMENU)"))

		declare -A IFACECFG;
		IFACECFG["Interface"]="${IFACECHOICE[0]}"
		IFACECFG["IP"]="${IFACECHOICE[1]}"
		IFACECFG["Broadcast"]="${IFACECHOICE[3]}"
		IFACECFG["Gateway"]=`ip route show default dev ${IFACECHOICE[0]}|grep "^default via"| cut -d" " -f3`
                #cloning array with the next two lines:
                TMPVAR=$(declare -p IFACECFG)
                eval "${TMPVAR/IFACECFG=/IFACECFGNEW=}"

		while true
		do
		  CHOICE=`dialog --extra-label "Edit" --title "STATIC IP" --inputmenu "Configuration of interface \"${IFACECFGNEW['Interface']}\":" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 "IP" "${IFACECFGNEW['IP']}" "Broadcast" "${IFACECFGNEW['Broadcast']}" "Gateway" "${IFACECFGNEW['Gateway']}" 3>&2 2>&1 1>&3`
		  RETCODE=$?
		  case $RETCODE in
		    $DIALOG_EXTRA)
			CHANGES=($CHOICE)
			if [ "${CHANGES[0]}" == "RENAMED" ]; then
			  IFACECFGNEW["${CHANGES[1]}"]="${CHANGES[2]}"
			  continue;
			fi
			;;
		    $DIALOG_CANCEL)
			break;
			;;
		    $DIALOG_OK)
			BCAST="broadcast \"${IFACECFGNEW['Broadcast']}\""
			if [ -z "${IFACECFGNEW['Broadcast']}" ]; then BCAST=""; fi;                   
			eval "ip addr delete \"${IFACECFG['IP']}\" $BCAST dev \"${IFACECFG['Interface']}\""
			eval "ip addr add \"${IFACECFGNEW['IP']}\" $BCAST dev \"${IFACECFGNEW['Interface']}\""
			ip route del default via "${IFACECFG['Gateway']}" dev "${IFACECFG['Interface']}"
			ip route add default via "${IFACECFGNEW['Gateway']}" dev "${IFACECFGNEW['Interface']}"
			break; 
			;;
		  esac
		done
		continue;
                ;;
	      "HTTP PROXY")
                mapfile -t CFGLINE < <( grep "^http-proxy " "$OPENVPNCONFIG"| awk -vFPAT='([^ ]*)|("[^"]+")' '{for(i=1;i<=NF;i++){print $i}}' )
		declare -A PROXYCFG;
	  	PROXYCFG["Host"]="${CFGLINE[1]}"
	  	PROXYCFG["Port"]="${CFGLINE[2]}"
                mapfile -t PROXYAUTH < <(cat "${CFGLINE[3]}" 2>&-)
	  	PROXYCFG["User"]="${PROXYAUTH[0]}"
	        PROXYCFG["Password"]="${PROXYAUTH[1]}"
                #cloning array with the next two lines:
                TMPVAR=$(declare -p PROXYCFG)
                eval "${TMPVAR/PROXYCFG=/PROXYCFGNEW=}";

                while true
		do
		  CHOICE=`dialog --extra-label "Edit" --cancel-label "Delete" --title "HTTP PROXY" --inputmenu "Configuration of HTTP proxy:" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 "Host" "${PROXYCFGNEW['Host']}" "Port" "${PROXYCFGNEW['Port']}" "User" "${PROXYCFGNEW['User']}" "Password" "${PROXYCFGNEW['Password']}" 3>&2 2>&1 1>&3`
		  RETCODE=$?
		  case $RETCODE in
		    $DIALOG_EXTRA)
			CHANGES=($CHOICE)
			if [ "${CHANGES[0]}" == "RENAMED" ]; then
			  PROXYCFGNEW["${CHANGES[1]}"]="${CHANGES[2]}"
			  continue;
			fi
			;;
		    $DIALOG_CANCEL)
                         rm "${OPENVPNCONFIG}.httpauth" 2>&-
                         sed -i "/^http-proxy/d" "$OPENVPNCONFIG"
			break;
			;;
		    $DIALOG_OK)
                        if [ -z "${PROXYCFGNEW['Host']}" ]; then
                          rm "${OPENVPNCONFIG}.httpauth" 2>&-
                          sed -i "/^http-proxy/d" "$OPENVPNCONFIG"
                          break;
                        fi
                        echo -ne "${PROXYCFGNEW['User']}\n${PROXYCFGNEW['Password']}" > "${OPENVPNCONFIG}.httpauth"
                        sed -i "/^socks-proxy/d" "$OPENVPNCONFIG"
                        if [ -z "${CFGLINE[3]}" ]; then
                          echo "http-proxy ${PROXYCFGNEW['Host']} ${PROXYCFGNEW['Port']} ${OPENVPNCONFIG}.httpauth basic" >> "$OPENVPNCONFIG"
                        else
                          sed -i "s#^http-proxy \([^ ]*\) \([[^ ]*]\) \([[^ ]*]\) \([[^ ]*]\)\$#http-proxy ${PROXYCFGNEW['Host']} ${PROXYCFGNEW['Port']} ${OPENVPNCONFIG}.httpauth \4#" "$OPENVPNCONFIG"      
                        fi
                        grep -q "^http-proxy-retry" "$OPENVPNCONFIG" || echo "http-proxy-retry" >> "$OPENVPNCONFIG"
			break; 
			;;
		  esac
		done
                ;;
 	      "SOCKS PROXY")
                mapfile -t CFGLINE < <( grep "^socks-proxy " "$OPENVPNCONFIG"| awk -vFPAT='([^ ]*)|("[^"]+")' '{for(i=1;i<=NF;i++){print $i}}' )
		declare -A PROXYCFG;
	  	PROXYCFG["Host"]="${CFGLINE[1]}"
	  	PROXYCFG["Port"]="${CFGLINE[2]}"
                mapfile -t PROXYAUTH < <(cat "${CFGLINE[3]}" 2>&-)
	  	PROXYCFG["User"]="${PROXYAUTH[0]}"
	        PROXYCFG["Password"]="${PROXYAUTH[1]}"
                #cloning array with the next two lines:
                TMPVAR=$(declare -p PROXYCFG)
                eval "${TMPVAR/PROXYCFG=/PROXYCFGNEW=}";

                while true
		do
		  CHOICE=`dialog --extra-label "Edit" --cancel-label "Delete" --title "SOCKS PROXY" --inputmenu "Configuration of SOCKS proxy:" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 "Host" "${PROXYCFGNEW['Host']}" "Port" "${PROXYCFGNEW['Port']}" "User" "${PROXYCFGNEW['User']}" "Password" "${PROXYCFGNEW['Password']}" 3>&2 2>&1 1>&3`
		  RETCODE=$?
		  case $RETCODE in
		    $DIALOG_EXTRA)
			CHANGES=($CHOICE)
			if [ "${CHANGES[0]}" == "RENAMED" ]; then
			  PROXYCFGNEW["${CHANGES[1]}"]="${CHANGES[2]}"
			  continue;
			fi
			;;
		    $DIALOG_CANCEL)
                         rm "${OPENVPNCONFIG}.socksauth" 2>&-
                         sed -i "/^socks-proxy/d" "$OPENVPNCONFIG"
			break;
			;;
		    $DIALOG_OK)
                        if [ -z "${PROXYCFGNEW['Host']}" ]; then
                          rm "${OPENVPNCONFIG}.socksauth" 2>&-
                          sed -i "/^socks-proxy/d" "$OPENVPNCONFIG"
                          break;
                        fi
                        echo -ne "${PROXYCFGNEW['User']}\n${PROXYCFGNEW['Password']}" > "${OPENVPNCONFIG}.socksauth"
                        sed -i "/^http-proxy/d" "$OPENVPNCONFIG"
                        if [ -z "${CFGLINE[3]}" ]; then
                          echo "socks-proxy ${PROXYCFGNEW['Host']} ${PROXYCFGNEW['Port']} ${OPENVPNCONFIG}.socksauth" >> "$OPENVPNCONFIG"
                        else
                          sed -i "s#^socks-proxy \([^ ]*\) \([[^ ]*]\) \([[^ ]*]\)\$#socks-proxy ${PROXYCFGNEW['Host']} ${PROXYCFGNEW['Port']} ${OPENVPNCONFIG}.socksauth#" "$OPENVPNCONFIG"      
                        fi
                        grep -q "^socks-proxy-retry" "$OPENVPNCONFIG" || echo "socks-proxy-retry" >> "$OPENVPNCONFIG"
			break; 
			;;
		  esac
		done
                ;;

              *)
                feature_not_implemented
                ;;
	    esac
	done
	continue
	;;
    "DISK")
	while true
	do
	  read DISKCHOICE <<< $(dialog_menu "DISK" "$DISKMENUTEXT" "$(declare -p DISKMENU)")
	  if [ "$DISKCHOICE" == "VIEW" ]; then
	    dialog --title "BLOCK DEVICES VIEW" --msgbox "$(lsblk -f; echo "-----EXISTING MAPPINGS-----"; losetup -a| sed 's#/dev/loop\([^:]*\):.*(\([^)]*\))#\1 \2#'| awk '{if($1>=8 && $1<18){print $2" => evidence"($1-8)} else if($1>=18 && $1<28){print $2" => storage"($1-18)} }' ; )" $BOXHEIGHT $BOXWIDTH 
	    continue
	  fi 

	  if [ "$DISKCHOICE" == "MAP" ]; then
	    ITEMS=`lsblk -l | tail -n +2 | grep -vE "sr0|loop[0-9]*" | awk '{print $1 " "$6"-"$4" off"}'`
	    CHOICE1=`dialog --title "SOURCE DEVICE" --radiolist "Please select the SOURCE device to map FROM:" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 $ITEMS 3>&2 2>&1 1>&3`
	    if [ $? -ne 0 ]; then continue; fi;

	    ALREADYMAPPED=`losetup -a | grep -o "^/dev/loop\([89]\|1[0-9]\|2[0-7]\)" | cut -d":" -f1 | sed 's#/dev/loop##g' | awk '{ORS="|";if($1<18){print "^evidence"($1-8)"$"} else{print "^storage"($1-18)"$"}}' | sed 's#|$##'`
	    if [ -z "$ALREADYMAPPED" ]; then ALREADYMAPPED="EMPTYLIST"; fi;
	    ITEMS=`echo "NONE disconnect on"; ls -1 /dev/container/| grep -vE "$ALREADYMAPPED" | awk '{if($1 ~ "evidence"){print $1" read-only off"}; if($1 ~ "storage"){print $1" READ-WRITE off"};}'`
	    CHOICE2=`dialog --title "DESTINATION DEVICE" --radiolist "Please select the DESTINATION device to map TO:" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 $ITEMS 3>&2 2>&1 1>&3`
	    if [ $? -ne 0 ]; then continue; fi;

	    if [ "$CHOICE2" == "NONE" ] #unmap the device
	    then
	      losetup -a | grep "(/dev/$CHOICE1)$"| cut -d":" -f1 | grep -o "^/dev/loop\([89]\|1[0-9]\|2[0-7]\)$" | xargs -n1 losetup -d
	    else
	      if echo "$CHOICE2" | grep -q "evidence"; 
	      then 
		echo "losetup -r \"/dev/container/$CHOICE2\" \"/dev/$CHOICE1\";" >> /tmp/log 
		losetup -r /dev/container/$CHOICE2 /dev/$CHOICE1 
	      elif echo "$CHOICE2" | grep -q "storage"; 
	      then 
		echo "losetup \"/dev/container/$CHOICE2\" \"/dev/$CHOICE1\";" >> /tmp/log 
		losetup /dev/container/$CHOICE2 /dev/$CHOICE1 
	      fi
	      dialog --title "INFO" --msgbox "Succesfully mapped /dev/$CHOICE1 to $CHOICE2." $BOXHEIGHT $BOXWIDTH 
	    fi
	    continue
	  fi 
     
	  if [ "$DISKCHOICE" == "UNMAP" ]; then
	    ITEMS=`losetup -a| sed 's#/dev/loop\([^:]*\):.*(\([^)]*\))#\1 \2#'| awk '{if($1>=8 && $1<18){print "evidence"($1-8)" <="$2" off"} else if($1>=18 && $1<28){print "storage"($1-18)" <="$2" off"} }'; `
	    CHOICE1=`dialog --title "UNMAP DEVICE" --radiolist "Please select the device pair to break mapping:" $BOXHEIGHT $BOXWIDTH $BOXHEIGHT2 $ITEMS 3>&2 2>&1 1>&3`
	    if [ $? -ne 0 ]; then continue; fi;
	    if echo "$CHOICE1"| grep -q "evidence"; then LOOPCHOICE1=$[${CHOICE1##evidence}+8]; fi
	    if echo "$CHOICE1"| grep -q "storage"; then LOOPCHOICE1=$[${CHOICE1##storage}+18]; fi
	    losetup -d "/dev/loop$LOOPCHOICE1" && dialog --title "INFO" --msgbox "Succesfully unmapped $CHOICE1." $BOXHEIGHT $BOXWIDTH 
	    continue
	  fi
     
	  if [ "$DISKCHOICE" == "BACK" ]; then break; fi;
	  feature_not_implemented
	done 
	continue
        ;;
  ### OTHER COMMANDS ###
     "SHUTDOWN") 
        clear;
        poweroff;
        break; 
        ;;
     "EXIT") 
        clear; 
        break; 
        ;;
     "INTRODUCTION")
        dialog --title "INTRODUCTION" --textbox /usr/share/<PROJECTNAME>/introduction $BOXHEIGHT $BOXWIDTH
        continue;
        ;;

     "CONTAINER-SHELL")
         clear;
         echo "Waiting for container.."
         sudo chown "$CONTAINERUSER" `tty`
         sudo -u "$CONTAINERUSER" -H lxc-wait -n "$CONTAINERNAME" -s RUNNING 2>/dev/null
         sudo -u "$CONTAINERUSER" -H lxc-attach -n "$CONTAINERNAME"
         clear
         continue;
         ;;

     "SHELL")
         clear;
         /bin/bash -l;
         continue;
         ;;
     "CHAT")
         dialog --title "COMMON USER WARNING" --msgbox "You are about to enter IRC chat application. If you would like to exit chat, you have to type command \"/quit\" and press ENTER. IRC chat can be started from any shell session as well just by running \"irssi\" command. It will automatically use settings at /etc/irssi.conf to connect to internal IRC server." $BOXHEIGHT $BOXWIDTH 
         /usr/bin/irssi
         continue;
         ;;
     "STATUS")
         SESSNAME="status"
         if ! tmux has-session -t "$SESSNAME" >/dev/null
         then
           tmux new-session -n main -s "$SESSNAME" /usr/bin/<PROJECTSHORTNAME>-monitor
         else
           tmux attach-session -t "$SESSNAME:main"
         fi
         continue;
         ;;
     *)
         feature_not_implemented
         ;;
  esac
done
